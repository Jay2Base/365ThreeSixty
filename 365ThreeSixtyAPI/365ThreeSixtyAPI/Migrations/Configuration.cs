using _365ThreeSixtyAPI.Models;

namespace _365ThreeSixtyAPI.Migrations
{

    using System.Data.Entity.Migrations;
   

    internal sealed class Configuration : DbMigrationsConfiguration<_365ThreeSixtyAPI.Models._365ThreeSixtyAPIContext>
    {
        public Configuration()
        {
            AutomaticMigrationsEnabled = false;
        }

        protected override void Seed(_365ThreeSixtyAPI.Models._365ThreeSixtyAPIContext context)
        {
            //  This method will be called after migrating to the latest version.

            //  You can use the DbSet<T>.AddOrUpdate() helper extension method 
            //  to avoid creating duplicate seed data. E.g.
            //
            //    context.People.AddOrUpdate(
            //      p => p.FullName,
            //      new Person { FullName = "Andrew Peters" },
            //      new Person { FullName = "Brice Lambson" },
            //      new Person { FullName = "Rowan Miller" }
            //    );
            //
            context.employee.AddOrUpdate(
                x => x.id,
                new employee() { firstName = "Jay", lastName = "lastName", tier = 1, team = 1, handle = "@Jay", email = "Jay@365Threesixty.com" },
                new employee() { firstName = "Karen", lastName = "lastName", tier = 2, team = 1, handle = "@Karen", email = "Karen@365Threesixty.com" },
                new employee() { firstName = "Kev", lastName = "lastName", tier = 2, team = 1, handle = "@Kev", email = "Kev@365Threesixty.com" },
                new employee() { firstName = "Adam", lastName = "lastName", tier = 3, team = 1, handle = "@Adam", email = "Adam@365Threesixty.com" },
                new employee() { firstName = "Dave", lastName = "lastName", tier = 3, team = 1, handle = "@Dave", email = "Dave@365Threesixty.com" },
                new employee() { firstName = "Lee", lastName = "lastName", tier = 4, team = 1, handle = "@Lee", email = "Lee@365Threesixty.com" },
                new employee() { firstName = "Matt", lastName = "lastName", tier = 4, team = 1, handle = "@Matt", email = "Matt@365Threesixty.com" },
                new employee() { firstName = "Sakis", lastName = "lastName", tier = 3, team = 1, handle = "@Sakis", email = "Sakis@365Threesixty.com" },
                new employee() { firstName = "Josh", lastName = "lastName", tier = 4, team = 1, handle = "@Josh", email = "Josh@365Threesixty.com" },
                new employee() { firstName = "Will", lastName = "lastName", tier = 5, team = 1, handle = "@Will2", email = "Will@365Threesixty.com" }

                );

            context.exclusions.AddOrUpdate(
                x => x.Id,
                new exclusions() { exclusion = "And" },
new exclusions() { exclusion = "Or" },
new exclusions() { exclusion = "But" },
new exclusions() { exclusion = "Nor" },
new exclusions() { exclusion = "So" },
new exclusions() { exclusion = "For" },
new exclusions() { exclusion = "Yet" },
new exclusions() { exclusion = "After" },
new exclusions() { exclusion = "Although" },
new exclusions() { exclusion = "As" },
new exclusions() { exclusion = "As If" },
new exclusions() { exclusion = "As Long As" },
new exclusions() { exclusion = "Because" },
new exclusions() { exclusion = "Before" },
new exclusions() { exclusion = "Even If" },
new exclusions() { exclusion = "Even Though" },
new exclusions() { exclusion = "Once" },
new exclusions() { exclusion = "Since" },
new exclusions() { exclusion = "So That" },
new exclusions() { exclusion = "Though" },
new exclusions() { exclusion = "Till" },
new exclusions() { exclusion = "Unless" },
new exclusions() { exclusion = "Until" },
new exclusions() { exclusion = "What" },
new exclusions() { exclusion = "When" },
new exclusions() { exclusion = "Whenever" },
new exclusions() { exclusion = "Wherever" },
new exclusions() { exclusion = "Whether" },
new exclusions() { exclusion = "While" },
new exclusions() { exclusion = "all" },
new exclusions() { exclusion = "anybody" },
new exclusions() { exclusion = "anyone" },
new exclusions() { exclusion = "anything" },
new exclusions() { exclusion = "both" },
new exclusions() { exclusion = "each" },
new exclusions() { exclusion = "either" },
new exclusions() { exclusion = "everybody" },
new exclusions() { exclusion = "everyone" },
new exclusions() { exclusion = "everything" },
new exclusions() { exclusion = "few" },
new exclusions() { exclusion = "hers" },
new exclusions() { exclusion = "herself" },
new exclusions() { exclusion = "him" },
new exclusions() { exclusion = "himself" },
new exclusions() { exclusion = "his" },
new exclusions() { exclusion = "another" },
new exclusions() { exclusion = "any" },
new exclusions() { exclusion = "he" },
new exclusions() { exclusion = "her" },
new exclusions() { exclusion = "its" },
new exclusions() { exclusion = "itself" },
new exclusions() { exclusion = "it" },
new exclusions() { exclusion = "many" },
new exclusions() { exclusion = "me mine" },
new exclusions() { exclusion = "more" },
new exclusions() { exclusion = "most" },
new exclusions() { exclusion = "much" },
new exclusions() { exclusion = "my" },
new exclusions() { exclusion = "myself" },
new exclusions() { exclusion = "neither" },
new exclusions() { exclusion = "no one" },
new exclusions() { exclusion = "nobody" },
new exclusions() { exclusion = "none" },
new exclusions() { exclusion = "nothing" },
new exclusions() { exclusion = "one" },
new exclusions() { exclusion = "our" },
new exclusions() { exclusion = "ours" },
new exclusions() { exclusion = "ourselves" },
new exclusions() { exclusion = "several" },
new exclusions() { exclusion = "she" },
new exclusions() { exclusion = "some" },
new exclusions() { exclusion = "somebody" },
new exclusions() { exclusion = "someone" },
new exclusions() { exclusion = "something" },
new exclusions() { exclusion = "that" },
new exclusions() { exclusion = "them" },
new exclusions() { exclusion = "themselves" },
new exclusions() { exclusion = "these" },
new exclusions() { exclusion = "they" },
new exclusions() { exclusion = "this" },
new exclusions() { exclusion = "other" },
new exclusions() { exclusion = "others" },
new exclusions() { exclusion = "their" },
new exclusions() { exclusion = "theirs" },
new exclusions() { exclusion = "those" },
new exclusions() { exclusion = "us" },
new exclusions() { exclusion = "we" },
new exclusions() { exclusion = "what" },
new exclusions() { exclusion = "whatever" },
new exclusions() { exclusion = "which" },
new exclusions() { exclusion = "whichever" },
new exclusions() { exclusion = "who" },
new exclusions() { exclusion = "whoever" },
new exclusions() { exclusion = "whom" },
new exclusions() { exclusion = "whomever" },
new exclusions() { exclusion = "whose" },
new exclusions() { exclusion = "you" },
new exclusions() { exclusion = "your" },
new exclusions() { exclusion = "yours" },
new exclusions() { exclusion = "yourself" },
new exclusions() { exclusion = "yourselves" },
new exclusions() { exclusion = "aboard" },
new exclusions() { exclusion = "about" },
new exclusions() { exclusion = "above" },
new exclusions() { exclusion = "across" },
new exclusions() { exclusion = "after" },
new exclusions() { exclusion = "against" },
new exclusions() { exclusion = "along" },
new exclusions() { exclusion = "amid" },
new exclusions() { exclusion = "among" },
new exclusions() { exclusion = "anti" },
new exclusions() { exclusion = "around" },
new exclusions() { exclusion = "as" },
new exclusions() { exclusion = "at" },
new exclusions() { exclusion = "before" },
new exclusions() { exclusion = "behind" },
new exclusions() { exclusion = "below" },
new exclusions() { exclusion = "beneath" },
new exclusions() { exclusion = "beside" },
new exclusions() { exclusion = "besides" },
new exclusions() { exclusion = "between" },
new exclusions() { exclusion = "beyond" },
new exclusions() { exclusion = "but" },
new exclusions() { exclusion = "by" },
new exclusions() { exclusion = "concerning" },
new exclusions() { exclusion = "considering" },
new exclusions() { exclusion = "despite" },
new exclusions() { exclusion = "down" },
new exclusions() { exclusion = "during" },
new exclusions() { exclusion = "except" },
new exclusions() { exclusion = "excepting" },
new exclusions() { exclusion = "excluding" },
new exclusions() { exclusion = "following" },
new exclusions() { exclusion = "for" },
new exclusions() { exclusion = "from" },
new exclusions() { exclusion = "in" },
new exclusions() { exclusion = "inside" },
new exclusions() { exclusion = "into" },
new exclusions() { exclusion = "like" },
new exclusions() { exclusion = "minus" },
new exclusions() { exclusion = "near" },
new exclusions() { exclusion = "of" },
new exclusions() { exclusion = "off" },
new exclusions() { exclusion = "on" },
new exclusions() { exclusion = "onto" },
new exclusions() { exclusion = "opposite" },
new exclusions() { exclusion = "outside" },
new exclusions() { exclusion = "over" },
new exclusions() { exclusion = "past" },
new exclusions() { exclusion = "per" },
new exclusions() { exclusion = "plus" },
new exclusions() { exclusion = "regarding" },
new exclusions() { exclusion = "round" },
new exclusions() { exclusion = "save" },
new exclusions() { exclusion = "since" },
new exclusions() { exclusion = "than" },
new exclusions() { exclusion = "through" },
new exclusions() { exclusion = "to" },
new exclusions() { exclusion = "toward" },
new exclusions() { exclusion = "towards" },
new exclusions() { exclusion = "under" },
new exclusions() { exclusion = "underneath" },
new exclusions() { exclusion = "unlike" },
new exclusions() { exclusion = "until" },
new exclusions() { exclusion = "up" },
new exclusions() { exclusion = "upon" },
new exclusions() { exclusion = "versus" },
new exclusions() { exclusion = "via" },
new exclusions() { exclusion = "with" },
new exclusions() { exclusion = "within" },
new exclusions() { exclusion = "without" },
new exclusions() { exclusion = "the" }
);
        }
    }
}
